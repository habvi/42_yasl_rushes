#!./yasl

{
0:4
8388608:4
32768:4
8421376:4
128:4
8388736:4
32896:4
12632256:4
8421504:4
16711680:4
65280:4
16776960:4
255:4
16711935:4
65535:4
16777215:4
0:4
95:4
135:4
175:4
215:4
255:4
24320:4
24415:4
24455:4
24495:4
24535:4
24575:4
34560:4
34655:4
34695:4
34735:4
34775:4
34815:4
44800:4
44895:4
44935:4
44975:4
45015:4
45055:4
55040:4
55135:4
55175:4
55215:4
55255:4
55295:4
65280:4
65375:4
65415:4
65455:4
65495:4
65535:4
6225920:4
6226015:4
6226055:4
6226095:4
6226135:4
6226175:4
6250240:4
6250335:4
6250375:4
6250415:4
6250455:4
6250495:4
6260480:4
6260575:4
6260615:4
6260655:4
6260695:4
6260735:4
6270720:4
6270815:4
6270855:4
6270895:4
6270935:4
6270975:4
6280960:4
6281055:4
6281095:4
6281135:4
6281175:4
6281215:4
6291200:4
6291295:4
6291335:4
6291375:4
6291415:4
6291455:4
8847360:4
8847455:4
8847495:4
8847535:4
8847575:4
8847615:4
8871680:4
8871775:4
8871815:4
8871855:4
8871895:4
8871935:4
8881920:4
8882015:4
8882055:4
8882095:4
8882135:4
8882175:4
8892160:4
8892255:4
8892295:4
8892335:4
8892375:4
8892415:4
8902400:4
8902495:4
8902535:4
8902575:4
8902615:4
8902655:4
8912640:4
8912735:4
8912775:4
8912815:4
8912855:4
8912895:4
11468800:4
11468895:4
11468935:4
11468975:4
11469015:4
11469055:4
11493120:4
11493215:4
11493255:4
11493295:4
11493335:4
11493375:4
11503360:4
11503455:4
11503495:4
11503535:4
11503575:4
11503615:4
11513600:4
11513695:4
11513735:4
11513775:4
11513815:4
11513855:4
11523840:4
11523935:4
11523975:4
11524015:4
11524055:4
11524095:4
11534080:4
11534175:4
11534215:4
11534255:4
11534295:4
11534335:4
14090240:4
14090335:4
14090375:4
14090415:4
14090455:4
14090495:4
14114560:4
14114655:4
14114695:4
14114735:4
14114775:4
14114815:4
14124800:4
14124895:4
14124935:4
14124975:4
14125015:4
14125055:4
14135040:4
14135135:4
14135175:4
14135215:4
14135255:4
14135295:4
14145280:4
14145375:4
14145415:4
14145455:4
14145495:4
14145535:4
14155520:4
14155615:4
14155655:4
14155695:4
14155735:4
14155775:4
16711680:4
16711775:4
16711815:4
16711855:4
16711895:4
16711935:4
16736000:4
16736095:4
16736135:4
16736175:4
16736215:4
16736255:4
16746240:4
16746335:4
16746375:4
16746415:4
16746455:4
16746495:4
16756480:4
16756575:4
16756615:4
16756655:4
16756695:4
16756735:4
16766720:4
16766815:4
16766855:4
16766895:4
16766935:4
16766975:4
16776960:4
16777055:4
16777095:4
16777135:4
16777175:4
16777215:4
526344:4
1184274:4
1842204:4
2500134:4
3158064:4
3815994:4
4473924:4
5131854:4
5789784:4
6447714:4
7105644:4
7763574:4
8421504:4
9079434:4
9737364:4
10395294:4
11053224:4
11711154:4
12369084:4
13027014:4
13684944:4
14342874:4
15000804:4
15658734:4
256:4
4:[]:4
} init_color_list

{
	"\n" print
} endl

{
	print_stack
	endl
} print_stackln

{
	print
	endl
} println

{
} none

{
	6:=:1
	5:=:1
	1:-:1
} store1

{
	6:=:2
	5:=:2
	2:-:2
} store2

{
	6:=:3
	5:=:3
	3:-:3
} store3

{
	6:=:4
	5:=:4
	4:-:4
} store4

{
	6:=:7
	7:(^ =):7

	// cmp
	0:=:7
	7:== ? store1 : none

	5:(1 -):5
	5:=:0
} convert_base64_to_base10_1

{
	6:=:7
	7:(^ =):7

	// cmp
	0:=:7
	7:== ? store2 : none

	5:(1 -):5
	5:=:0
} convert_base64_to_base10_2

{
	6:=:7
	7:(^ =):7

	// cmp
	0:=:7
	7:== ? store3 : none

	5:(1 -):5
	5:=:0
} convert_base64_to_base10_3

{
	6:=:7
	7:(^ =):7

	// cmp
	0:=:7
	7:== ? store4 : none

	5:(1 -):5
	5:=:0
} convert_base64_to_base10_4

{
	endl
	"Error: found a invalid string\n" print
	1 exit
} file_content_erorr

{
	6:=:5
	5:=:0
	@convert_base64_to_base10_1
	1:#:1
	1:1
	1:!= ? file_content_erorr
	5:!
	!

	6:=:5
	5:=:0
	@convert_base64_to_base10_2
	2:#:2
	1:2
	2:!= ? file_content_erorr
	5:!
	!

	6:=:5
	5:=:0
	@convert_base64_to_base10_3
	3:#:3
	1:3
	3:!= ? file_content_erorr
	5:!
	!

	6:=:5
	5:=:0
	@convert_base64_to_base10_4
	4:#:4
	2:4
	4:!= ? file_content_erorr
	5:!
	!
} loop_every_4bits

{
	2:=:5
	48:5
	5:&:5
	4:5
	5:>>:5
	1:=:5
	63:5
	5:&:5
	2:5
	5:(<< |):5
} red

{
	3:=:5
	60:5
	5:&:5
	2:5
	5:>>:5
	2:=:5
	15:5
	5:&:5
	4:5
	5:(<< |):5
} green

{
	4:=:5
	63:5
	5:&:5
	3:=:5
	3:5
	5:&:5
	6:5
	5:(<< |):5
} blue

{
	blue
	green
	red
} from_6bit_to_8bit

{
	1:!
	2:!
	3:!
	4:!
} clear_stack1_to_4

{
	5:!
	5:!
	5:!
} clear_stack5

{
	"":5
	5:+:5
} to_string_stack5

{
	255:8
	215:8
	175:8
	135:8
	95:8
	0:8
	6:8
	8:[]:8
} set_thread_val

{
	5:=:0
	1:=:0
	<= ? 0 : 1
} in_range

{
	5:=
	1:=:2
	1:=:0
	1:!
	>= ? in_range : 1
} get_near_value_loop

{
	@get_near_value_loop
} get_near_value_loop_wrap

{
	5:=:0
	2:=:0
	-:3
	1:=:1
	5:=:1
	1:-:3
	3:>=:0
	1 == ? 1:=:4 : 2:=:4
} which_value

{
	1:!:1
	1:#:1
	0:1
	1:>:1
	1:? 1 : 0
} clear_stack1
{
	2:!:2
	2:#:2
	0:2
	2:>:2
	2:? 1 : 0
} clear_stack2

{
	3:!:3
	3:#:3
	0:3
	3:>:3
	3:? 1 : 0
} clear_stack3

{
	4:!:4
	4:#:4
	0:4
	4:>:4
	4:? 1 : 0
} clear_stack4

{
	5:!:5
	5:#:5
	0:5
	5:>:5
	5:? 1 : 0
} clear_stack5


{
	#:1
	1
	@clear_stack1
	#:2
	1
	@clear_stack2
	#:3
	1
	@clear_stack3
	#:5
	1
	@clear_stack5
	8:!
} clear_stack

{
	!
	0:1
	0:2
} zero_value

{
	5:=
	8:=:1
	1:][:1
	1:!
	5:=
	0
	!= ? get_near_value_loop_wrap : zero_value
	which_value
	5:!
	1:#
	@clear_stack1
	2:#
	@clear_stack2
	5:#
} get_near_value

{
	3
	@get_near_value
} convert_std255

{
	4:=:0
	4:!
	256:4
	4:*:0
	65536:4
	4:*:0
	+ +
} calc_color

{
	5:!
	0
} copy_searched_color

{
	1 -
	5:!
	1
} continue_search

{
	5:#:2
	5:=:5
	1:=:5
	5:== ? copy_searched_color : continue_search
} search_color_loop

{
	0:=:1
	0:!
	4:=:5
	5:][:5
	5:!
	255
	255
	@search_color_loop
} search_color

{
	"\e[48;5;" print
	print
	"m  \e[0m" print
} print_color

{
	set_thread_val
	convert_std255
	calc_color
	search_color
	print_color
	clear_stack
} convert256_and_print

{
	"\e[48;2;"
	to_string_stack5
	5:=:0
	5:!
	+ ";" +
	to_string_stack5
	5:=:0
	5:!
	+ ";" +
	to_string_stack5
	5:=:0
	5:!
	+ "m  \e[0m" + print
} print_rgb_background

{
	loop_every_4bits

	// base10 RGB to stack5 {top | r, g, b |bottom}
	from_6bit_to_8bit
	clear_stack1_to_4

	// sano-san : base10 RGB in stack5 -> 256 color & print
	// convert256_and_print
	print_rgb_background

	8:(1 -):8
	8:=:0

	// endl each line
	8:=:8
	9:=:8
	8:%:8
	0:8
	8:== ? endl
} loop_number_of_pixels

{
	2:=:9
	2:!
	0
} store_sqrt_to_9

{
	1:2
	2:-:2
	2:=:0
} decrement

{
	2:(= =):1
	1:*:1
	8:=:1
	1:== ? store_sqrt_to_9 : decrement
} loop_sqrt

{
	// limit
	245:2
	2:=:0
	@loop_sqrt
} calc_sqrt

{
	"Error: is not a square\n" print
	1 exit
} is_not_square

{
	9:#:9
	1:9
	9:== ? is_not_square
} is_square

{
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/":7
	7:][:7
	64:6
	7:!
} set_base64

{
	"Image received, nb pixels : " print
	8:=:8
	8:print
	endl

	"Found square : " print
	9:=:9
	9:print
	endl
} print_description

{
	8:(1 -):8
} minus1

{
	8:=:0
	!^
	8:(1 - =):8
	1:8
	8:== ? minus1
	8:=:0
} loop_unroll

{
	9:=:8
	8:=:0
	@loop_unroll
	8:!
} reverse_stack0

{
	"Error: invalid arguments\n" print
	1 exit
} args_erorr

{
	1 != ? args_erorr
} check_args

{
	"Error: invalid bytes\n" print
	1 exit
} base64_error

{
	= 4 % 0 != ? base64_error
} is_divisible_by_4

{
	check_args
	read
	is_divisible_by_4
	init_color_list

	0:=:9
	4 /
	0:=:8 !
	][ !

	reverse_stack0
	calc_sqrt
	is_square
	set_base64
	print_description

	8:=:0
	@loop_number_of_pixels
} main

main
